AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to host a project on S3 with CloudFront and ACM SSL certificate.

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket to create
    Default: frontend.tailyew.com

  DomainName:
    Type: String
    Description: The domain name to use for the project
    Default: tailyew.com

  HostedZoneId:
    Type: String
    Description: The Route 53 hosted zone ID for the domain
    Default: "/hostedzone/Z01600813VTG3S52FJBE"

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]

Resources:
  # S3 Bucket for Private Access via CloudFront OAI
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudFront Origin Access Identity
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for S3 access via CloudFront"

  # Bucket Policy to Allow Only CloudFront Access
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: S3Origin
            DomainName: !Sub "${BucketName}.s3.us-east-1.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub "CloudFront distribution for ${BucketName}"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          AcmCertificateArn: "{{resolve:ssm:/infra/acm_certificate_arn}}"
          SslSupportMethod: sni-only
        IPV6Enabled: true
        HttpVersion: http2

  # Route 53 Record (conditionally created)
  Route53Record:
    Type: AWS::Route53::RecordSet
    Condition: HasHostedZone
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${DomainName}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # Required for CloudFront alias records

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket created
    Value: !Ref FrontendBucket

  CloudFrontDistributionDomain:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  Route53RecordName:
    Description: Fully qualified domain name for the hosted website
    Value: !Sub "${DomainName}."
    Condition: HasHostedZone

  WebsiteURL:
    Description: Full URL of the hosted website
    Value: !Sub "https://${DomainName}"
